[ids]
*
[global]
overload_tap_timeout=200


[main]
pageup=macro2(90, 90, C-email))
rightalt = enter


102nd = leftshift
y=z
z=y
capslock = overload(capslock, esc)
tab = overload(tab_layer, tab)
/ = overload(shift, slash)

#fn key laptop
wakeup=layer(meta)

[alt]
tab = A-tab

[control]
tab = C-tab

[control+shift]
tab = C-S-tab


[meta]
u = M-up
, = M-right
i = M-w
h = M-left
l = M-right
q = A-f9
s = command(echo 1 | tee '/sys/class/leds/platform::micmute/brightness' && sleep 0.2 && echo 0 | tee '/sys/class/leds/platform::micmute/brightness' && logger 'keyd_attempt_sle_ep' && systemctl suspend)

, = pageup
. = pagedown
#semicolon = compose #useless
#fn key laptop
scrolllock = M-k
# restore fn stuff
f1 = mute
f2 = volumedown
f3 = volumeup
f4 = micmute
f5 = brightnessdown
f6 =brightnessup

mute = mute
volumedown = volumedown
volumeup = volumeup
micmute = micmute
brightnessdown = brightnessdown
brightnessup = brightnessup

space = command(sudo -u maxime sh -c 'sleep 0.2 && export DISPLAY="{{.DISPLAY_VAR}}" && /home/maxime/Documents/code/move-to-next-monitor/move-to-next-monitor') 

[capslock:C]
h = left
j = down
k = up
l = right
space = overload(capslock_space_layer, macro2(0,0,_))
u = minus
i = macro(+)
o = equal
p = delete
. = end
, = home
semicolon = swapm(dance_semicolon, é)
apostrophe = swapm(dance_apostrophe, à)
- = ✓
= = ✗
[ = swapm(dance_bracket, è)
] = ç
m = macro(\))
n = macro(\()
/ = *
p = #
# for laptop easy access
leftalt = layer(control)

[capslock_space_layer]
[capslock_space_layer+capslock]
h = backspace
l = delete
j = C-S-tab
k = C-tab
u = C-z
i = C-S-z
n = A-home
m = A-end
, = A-pageup
. = A-pagedown
# paste w/o formatting
v = command(sudo -u maxime sh -c 'copyq eval "var text = clipboard(); copy(text); copySelection(text); paste();" 1 2> /tmp/error.log')
#kitty specific should be in app specific
i = C-S-z
#obsidian specific
x = macro(C-v 100ms left left |400 right right enter) 



[dance_semicolon]
semicolon = swapm(dance_semicolon2, macro(backspace ç))

[dance_semicolon2]
semicolon = macro(backspace ô)

[dance_apostrophe]
apostrophe = macro(backspace â)

[dance_bracket]
[ = macro(backspace ê)

[tab_layer]
u = 7
i = 8
o = 9
j = 4
k = 5
l = 6
m = 1
, = 2
. = 3
space = 0
n = .
backspace = backspace
/ = *
n=volumedown
h=volumeup
# pycharm completion, TODO move to dedicated 
#semicolon = S-space
semicolon = .


[shift]
#space = swapm(space_delete, enter) # user for repeated keypress, deprecated
space = overload(shift_space_layer, macro2(0,0,enter))
# to avoid race condition due to my /=overoverload(shift, /)
/ = ?
a = swapm(space_space, A)
b = swapm(space_space, B)
c = swapm(space_space, C)
d = swapm(space_space, D)
e = swapm(space_space, E)
f = swapm(space_space, F)
g = swapm(space_space, G)
h = swapm(space_space, H)
i = swapm(space_space, I)
j = swapm(space_space, J)
k = swapm(space_space, K)
l = swapm(space_space, L)
m = swapm(space_space, M)
n = swapm(space_space, N)
o = swapm(space_space, O)
p = swapm(space_space, P)
q = swapm(space_space, Q)
r = swapm(space_space, R)
s = swapm(space_space, S)
t = swapm(space_space, T)
u = swapm(space_space, U)
v = swapm(space_space, V)
w = swapm(space_space, W)
x = swapm(space_space, X)
y = swapm(space_space, Z)
z = swapm(space_space, Y)

[shift_space_layer]
[shift_space_layer+shift]
a= b




[capslock+shift]
h = S-left
j = S-down
k = S-up
l = S-right
[capslock+control]
, = home
. = end
n = C-home
m = C-end



#[space_delete:S] # for repeated keypress, deprecated
#space = enter

[space_space:S]
space = space


[ctrl_shift_for_chrome:C-S]
c = C-c

[ctrl_shift_for_chrome_libr:C-S]
o = command(sudo -u maxime sh -c 'sleep 0.2 && export DISPLAY="{{.DISPLAY_VAR}}" && xdotool mousemove --window $(xdotool getactivewindow) 60 60 click 1 2> /tmp/error.log')

