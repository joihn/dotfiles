"==================== missing semester =========================
" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Disable the default Vim startup message.
set shortmess+=I

" Show line numbers.
set number

" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
set incsearch
" Highlight all search matches.
set hls

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse+=a

"============================== end missing semester ===================

nnoremap <C-t> :NERDTreeToggle<CR>
command! -nargs=0 Sw w !sudo tee % > /dev/null

syntax on
"colorscheme sublimemonokai
" tabstop:          Width of tab character
" softtabstop:      Fine tunes the amount of white space to be added
" shiftwidth        Determines the amount of whitespace to add in normal mode
" expandtab:        When this option is enabled, vi will use spaces instead of tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

:set nu! rnu!
set ttimeoutlen=10

let NERDTreeShowHidden=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Pazams opinionated: ‘d is for delete’ & ‘leader-d is for cut’ (shared clipboard register mode)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" If you are using the yankring plugin, there could be some conflicts.
" To make the most of these suggested mappings,
" make sure to delete any keys mapped below from the following line in yankring.vim
" (i.e., delete 'x' and 'D'):
" let g:yankring_n_keys = 'Y D x X'

let mapleader = ","
let g:mapleader = ","
nnoremap x "_x
nnoremap X "_X
nnoremap d "_d
nnoremap D "_D
vnoremap d "_d

if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
  nnoremap <leader>d "+d
  nnoremap <leader>D "+D
  vnoremap <leader>d "+d
else
  set clipboard=unnamed
  nnoremap <leader>d "*d
  nnoremap <leader>D "*D
  vnoremap <leader>d "*d
endif

" Better cursor
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Reset the cursor on start (for older versions of Vim, usually not required)
augroup myCmds
au!
autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END

" Disable mouse select triggering visual mode
set mouse-=a
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

"===================== Begin Kitten Clipboard Integration =====================

if executable('kitten')
  " Copy yanked text to the 'kitten clipboard' after any yank operation
  autocmd TextYankPost * if v:event.operator ==# 'y' && (v:event.regname ==# '' || v:event.regname ==# '"') | call system('kitten clipboard', @") | endif

  " Map 'p' to paste from the 'kitten clipboard'
  nnoremap p :call PasteFromKittenClipboard()<CR>
  xnoremap p :<C-U>call PasteFromKittenClipboard()<CR>

  function! PasteFromKittenClipboard()
    let l:text = system('kitten clipboard --get-clipboard')
    if v:shell_error
      echoerr "Failed to retrieve clipboard data from 'kitten clipboard'"
      return
    endif
    if !empty(l:text)
      call setreg('"', l:text)
      normal! p
    else
      echo "Kitten clipboard is empty"
    endif
  endfunction
endif

"===================== End Kitten Clipboard Integration =======================

highlight Search ctermfg=black ctermbg=yellow guifg=black guibg=yellow
