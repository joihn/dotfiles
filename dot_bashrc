# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#HISTSIZE=1000
#HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/maxime/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/maxime/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/maxime/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/maxime/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export ANSIBLE_NOCOWS=1
export chickenip=159.100.243.113
export monkeyip=194.182.163.58
export pandaip=89.145.166.246
export orangip=89.145.167.184
export slothip=85.217.160.255
export snakeip=91.92.117.181
export lizardip=194.182.171.230
export octopusip=10.194.24.65

export chickenname=smallGpu4test4npi
export monkeyname=erx-1-gpu-p100-1
export pandaname=erx-1-gpu-p100-2
export orangname=erx-1-gpu-p100-3
export slothname=erx-1-gpu-p100-4
export snakename=erx-2-gpu-a40-1
export lizardname=erx-2-gpu-a40-2
export octopusname=erx-2-gpu-rtx3090ti-1


source /home/maxime/.secretrc || echo ""

export TRAINING_USER="maxime"
cp_to_new_folder() {
  if [ "$#" -ne 2 ]; then
    echo "You need to provide exactly two arguments: source directory and target directory"
    return 1
  fi

  mkdir -p "$2" && cp -r "$1"/* "$2/"
}


bind "TAB:menu-complete"
# And Shift-Tab should cycle backwards
bind '"\e[Z": menu-complete-backward'
bind "set show-all-if-ambiguous on"
bind "set menu-complete-display-prefix on"
# after ctrl R, pageup/pagedown to iterate
#if [[ $- == *i* ]]; then
#    bind '"\e[5~": history-search-backward'
#    bind '"\e[6~": history-search-forward'
#fi

# after ctrl R, ctrl R to go previous, ctrl S to go to next
stty -ixon



# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
# export HISTFILE=~/.bash_eternal_history # disabled to be compatible with run in docker
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
# f12 equivqalent to ctrl R, then ctrl R ctrl S to oscillate
bind '"\e[24~":"\C-a\C-r\C-y\C-r"'

# ___________ alias ________________

abspath() { 
    if [ -z "$1" ]; then
        echo "Usage: abspath <relative-path>"
        return 1
    fi
    local rel_path="$1"
    local abs_path
    # Use readlink or realpath if available
    # Manual conversion
    abs_path=$(cd "$(dirname "$rel_path")" && pwd)/$(basename "$rel_path")
    echo -n "$abs_path"
}
fpc(){
     #readlink -f $1 | xclip -sel clip # will resolve symlink, undesired
     abspath $1 | xclip -sel clip

}
alias setup="cd /mnt/home/maxime/setup"
alias setup2="cd /mnt/erx/setup"
alias htop="htop -t"
alias keyd_reload="sudo cp ~/.config/keyd/default.conf /etc/keyd/default.conf && sudo keyd reload"
alias down="cd ~/Downloads"
alias editzsh="chezmoi edit ~/.zshrc"
alias editkey="chezmoi edit ~/.config/keyd/default.conf"
alias latest="find $1 -type f -print0 | xargs -0 stat --format '%Y :%y %n' | sort -nr | cut -d: -f2- | head"
alias pycharm="screen -dmS pycharm-\$(date +%s%N) pycharm-professional"
alias monitor_off="gnome-extensions disable system-monitor-next@paradoxxx.zero.gmail.com"
alias monitor_on="gnome-extensions enable system-monitor-next@paradoxxx.zero.gmail.com"
alias unzipdir='f() { mkdir -p "${1%.*}" && unzip "$1" -d "${1%.*}"; }; f'
#apply the changes whenever you save the file.
alias chezvim="chezmoi edit --watch $1"
export PATH="$PATH:$HOME/.local/bin"

mansubl() {
  if [ "$#" -ne 1 ]; then
    echo "You need to provide exactly 1 arguments"
    return 1
  fi

  man "$1" | col -b > /tmp/ls_man.txt && subl /tmp/ls_man.txt
}
pycal(){
    python -c "print($1)"
}
vpycal(){
    python -c "print(f\"$1 = {$1}\")"
}

alias bluco='echo -e "connect AC:80:0A:7E:44:BB \nquit" | bluetoothctl'
alias restart_audio_stack='systemctl --user restart pipewire; systemctl --user restart wireplumber; systemctl --user restart pipewire-pulse; sleep 2s; systemctl --user status pipewire pipewire-pulse wireplumber'
alias grep='grep -i'

alias clean_repo="find . -type d -name '__pycache__' -exec sudo rm -r {} + && find . -type d -name '*.egg-info' -exec sudo rm -rf {} + && find . -type d -name '*.eggs' -exec sudo rm -rf {} + && find . -type d -empty -exec sudo rm -rf {} +"

journalsubl() {
  journalctl -k --since today |uniq | col -b > /tmp/ls_man.txt && subl /tmp/ls_man.txt
}

gosubl() {
  cat | col -b > /tmp/ls_man.txt && subl /tmp/ls_man.txt
}
function csshfs() {
    local server_name="${1%%.*}" # extract hostname before dot

    local mount_point="/mnt/${server_name}"

    # Check if the mount point exists, if not create it, change ownership, and mount
    if [[ ! -d "$mount_point" ]]; then
        echo "Mount point $mount_point does not exist. Creating it now..."
        # Creating mount point and changing its owner to 'maxime'
        sudo mkdir "$mount_point"
        sudo chown maxime "$mount_point"
    fi

    echo sshfs -o allow_other "maxime@$1:/" "$mount_point"
    #                  ,default_permissions,uid=1007,gid=10000
    sshfs -o allow_other "maxime@$1:/" "$mount_point"
}

alias csshfs=csshfs
export SYSTEMD_LESS="FRSi-+X"
alias xrandr_repair="xrandr --output HDMI-1 --off && xrandr --output HDMI-1 --mode 1920x1080 --left-of DP-2"
alias res="reset"
alias hide_git="git config --add oh-my-zsh.hide-status 1 && git config --add oh-my-zsh.hide-dirty 1"
alias chezlg="lazygit -p ~/.local/share/chezmoi"

